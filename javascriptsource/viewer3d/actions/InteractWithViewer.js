// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
const DEBUG = true;
const PREFIX = '3dviewer::';

function log(msg, level='info', force=false){
	if(!DEBUG && !force){
		return;
	}
	
	let fn = console[level];
	if(fn){
		fn(`${PREFIX}${msg}`)
	}
}

async function getViewer(viewerName){
	let viewer = await mx.viewer3D.getViewerByName(viewerName);
	if(viewer){
		return viewer.pvwViewer;		
	}else{
		log(`Viewer ${viewerName} was not present!`, 'error');
	}
};

// END EXTRA CODE

/**
 * @param {string} viewerName - the viewerName
 * @param {string} operations - json string
 * @returns {Promise.<boolean>}
 */
export async function InteractWithViewer(viewerName, operations) {
	// BEGIN USER CODE
	let viewer = await getViewer(viewerName);
	if(!viewer){
		return;
	}

	// operations is an array
	const ops = JSON.parse( operations );
	ops.forEach(item => {
		const {action, value} = item;
		if(action === 'markup_restore'){
			const markupManager = viewer.markup;
			markupManager.showMarkupViewByJSON( value );
			markupManager.mode = PLMVisWeb.MarkupMode.Select
		}else if(action === 'mouse_highlight'){
			viewer.setMouseHighlightEnabled(value);
		}else{
			// 
		}
	});
	
	
	return true;
	// END USER CODE
}
