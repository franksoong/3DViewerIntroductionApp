// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
const DEBUG = true;
const PREFIX = '3dviewer::';

function log(msg, level='info', force=false){
	if(!DEBUG && !force){
		return;
	}
	
	let fn = console[level];
	if(fn){
		fn(`${PREFIX}${msg}`)
	}
}

async function getViewer(viewerName){
	let viewer = await mx.viewer3D.getViewerByName(viewerName);
	if(viewer){
		return viewer.pvwViewer;		
	}else{
		log(`Viewer ${viewerName} was not present!`, 'error');
	}
};


const get = (selector, parent)=>{
	const root = parent || document;
	return root.querySelector(selector);
}
const hasClass = (el, className)=>{
	return el.classList.contains(className);
}
const toggleClass = (el, className) =>{
	const flag = hasClass(el, className);
	if (flag) {
		el.classList.remove(className);
	} else {
		el.classList.add(className);
	}
	return flag;
}

// core function
function executeActionItem(item, viewer){
	const {action, value} = item;
	if(action === 'markup_restore'){
		const markupManager = viewer.markup;
		markupManager.showMarkupViewByJSON( value );
		markupManager.mode = PLMVisWeb.MarkupMode.Select
	}else if(action === 'mouse_highlight'){
		viewer.setMouseHighlightEnabled(value);
	}else if(action === 'fit_all'){
		viewer.fitToVisible();
	}else if(action === 'enter_fullscreen'){
		let el=get(value);
		if(el){
			el.requestFullscreen();
		}else{
			console.error(`${value} is not exit!`);
		}
	}else if(action === 'exit_fullscreen'){
		document.exitFullscreen();
	}else if(action === 'toggle_floorgrid'){
		let advancedRenderingManager = viewer.advancedRendering;
		let {floorGridEnabled} = advancedRenderingManager;
		if(floorGridEnabled){
			advancedRenderingManager.floorGridEnabled=false;
			advancedRenderingManager.shadowEnabled=false;
		}else{
			advancedRenderingManager.floorGridEnabled=true;
			advancedRenderingManager.shadowEnabled=true;
			// floorGridColor
			// floorGridDivisions
			// floorGridSize
			// floorSide
		}
	}else if(action === 'toggle_seeThrough'){
		let {seeThrough} = viewer;
		let enabled = seeThrough.enabled;
		seeThrough.enabled = !enabled
	
		// how to improve transparency and add layer effect
		// viewer.materialPool.updateMaterial(136, {opacity:0.1});
	}else if(action === 'snapshot'){
		// http://sci6w084/1.7.6/docs/API/PLMVisWeb.Snapshot.html
		let snapshot = viewer.snapshot;
		snapshot.enabled = true;

		let callback = function(canvas) {
			// download
			const downloadAchor = document.createElement("a");
			downloadAchor.setAttribute("download", "snapshot");
			downloadAchor.setAttribute("href", canvas.toDataURL());
			downloadAchor.click();
		};
		snapshot.createSnapshotCanvas(callback, {
			bgcolor: 0xFFFFFF,
			includeMarkup:true,
			includeBackground: true,
		});
	}
	
	
	
	else{
		// toggle_floorgrid
	}
}

// END EXTRA CODE

/**
 * @param {string} viewerName - the viewerName
 * @param {string} operations - json string
 * @returns {Promise.<boolean>}
 */
export async function JavaScript_InteractWithViewer(viewerName, operations) {
	// BEGIN USER CODE
	let viewer = await getViewer(viewerName);
	if(!viewer){
		return;
	}

	// operations is an array
	let ops = JSON.parse( operations );
	// convert to array
	if(!(ops instanceof Array)){
		ops=[ops];
	}

	try {
        ops.forEach(item => executeActionItem(item, viewer));
    } catch (error) {
		console.error(error);
    }	
	
	return true;
	// END USER CODE
}
